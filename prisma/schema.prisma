generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Reviews {
  id                   String   @id @default(uuid())
  body                 String
  tips                 String?
  rating               Int
  // == START ==
  // DO NOT update these fields manually
  // The following fields are updated automatically by triggers
  countEventViews      Int      @default(0) @map("count_event_views")
  countVotes           Int      @default(0) @map("count_votes")
  // === END ===
  reviewedProfessorId  String?  @map("reviewed_professor_id")
  reviewedCourseId     String   @map("reviewed_course_id")
  reviewedUniversityId Int      @map("reviewed_university_id")
  reviewedFacultyId    Int      @map("reviewed_faculty_id")
  reviewerId           String   @map("reviewer_id")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  reviewedCourse     Courses           @relation(fields: [reviewedCourseId], references: [id])
  reviewedFaculty    Faculties         @relation(fields: [reviewedFacultyId], references: [id])
  reviewedProfessor  Professors?       @relation(fields: [reviewedProfessorId], references: [id])
  reviewedUniversity Universities      @relation(fields: [reviewedUniversityId], references: [id])
  reviewer           Users             @relation(fields: [reviewerId], references: [id])
  reviewLabels       ReviewLabels[]
  votes              ReviewVotes[]
  reviewEvents       ReviewEvents[]
  reviewReactions    ReviewReactions[]

  @@index([createdAt], type: BTree)
  @@index([reviewedCourseId], type: BTree)
  @@index([reviewedProfessorId], type: BTree)
  @@map("reviews")
}

model Users {
  id                       String   @id @default(uuid())
  email                    String   @unique
  username                 String   @unique
  isVerified               Boolean  @default(false) @map("is_verified")
  universityId             Int      @map("university_id")
  deprecatedPasswordDigest String?  @map("deprecated_password_digest")
  firstName                String?  @map("first_name")
  lastName                 String?  @map("last_name")
  telegramId               String?  @unique @map("telegram_id")
  photoUrl                 String?  @map("photo_url")
  facultyId                Int?     @map("faculty_id")
  createdAt                DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt                DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  faculty            Faculties?           @relation(fields: [facultyId], references: [id])
  university         Universities         @relation(fields: [universityId], references: [id])
  votes              ReviewVotes[]
  reviews            Reviews[]
  reviewEvents       ReviewEvents[]
  ReviewReactions    ReviewReactions[]
  HackSubmissionVote HackSubmissionVote[]

  @@map("users")
}

model Universities {
  id         Int                    @id @default(autoincrement())
  name       String
  abbrv      UniversityAbbreviation @unique
  siteUrl    String                 @unique @map("site_url")
  createdAt  DateTime               @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime               @updatedAt @map("updated_at") @db.Timestamptz(3)
  courses    Courses[]
  faculties  Faculties[]
  professors Professors[]
  reviews    Reviews[]
  domains    UniversityDomains[]
  users      Users[]

  @@map("universities")
}

model UniversityDomains {
  id                   Int      @id @default(autoincrement())
  domain               String   @unique
  belongToUniversityId Int      @map("belong_to_university")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  belongToUniversity Universities @relation(fields: [belongToUniversityId], references: [id])

  @@map("university_domains")
}

model Courses {
  id                    String   @id @default(uuid())
  code                  String   @unique
  name                  String
  description           String
  creditUnits           Float    @map("credit_units")
  belongToUniversityId  Int      @map("belong_to_university")
  belongToFacultyId     Int      @map("belong_to_faculty")
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt             DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  courseArea            String?  @map("course_area")
  enrolmentRequirements String?  @map("enrolment_requirements")

  belongToFaculty    Faculties    @relation(fields: [belongToFacultyId], references: [id])
  belongToUniversity Universities @relation(fields: [belongToUniversityId], references: [id])
  classes            Classes[]
  reviews            Reviews[]

  @@map("courses")
}

model Professors {
  id                   String   @id @default(uuid())
  name                 String
  email                String
  slug                 String   @unique
  photoUrl             String   @map("photo_url")
  profileUrl           String   @map("profile_url")
  belongToUniversityId Int      @map("belong_to_university")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  belongToUniversity Universities         @relation(fields: [belongToUniversityId], references: [id])
  belongToFaculties  ProfessorFaculties[]
  classes            Classes[]
  reviews            Reviews[]

  @@map("professors")
}

model ProfessorFaculties {
  id          Int      @id @default(autoincrement())
  professorId String   @map("professor_id")
  facultyId   Int      @map("faculty_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  faculty   Faculties  @relation(fields: [facultyId], references: [id])
  professor Professors @relation(fields: [professorId], references: [id])

  @@map("professor_faculties")
}

model Faculties {
  id                   Int      @id @default(autoincrement())
  name                 String
  acronym              String
  siteUrl              String   @map("site_url")
  belongToUniversityId Int      @map("belong_to_university")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  belongToUniversity Universities @relation(fields: [belongToUniversityId], references: [id])

  belongToFaculties ProfessorFaculties[]
  courses           Courses[]
  reviews           Reviews[]
  users             Users[]

  @@unique([belongToUniversityId, acronym])
  @@map("faculties")
}

model Classes {
  id               String        @id @default(uuid())
  section          String
  courseId         String        @map("course_id")
  professorId      String        @map("professor_id")
  acadTermId       String        @map("acad_term_id")
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)
  gradingBasis     GradingBasis? @map("grading_basis")
  courseOutlineUrl String?       @map("course_outline_url")
  bossId           Int           @map("boss_id")

  classTimings      ClassTiming[]
  classExamTimings  ClassExamTiming[]
  ClassAvailability ClassAvailability[]
  bidResult         BidResult[]

  course    Courses    @relation(fields: [courseId], references: [id])
  professor Professors @relation(fields: [professorId], references: [id])
  acadTerm  AcadTerm   @relation(fields: [acadTermId], references: [id])

  @@unique([bossId, acadTermId])
  @@unique([courseId, section, acadTermId])
  @@index([courseId], type: BTree)
  @@index([professorId], type: BTree)
  @@map("classes")
}

model ReviewVotes {
  reviewId  String   @map("review_id")
  voterId   String   @map("voter_id")
  weight    Int      @default(1) @db.SmallInt // 1 for UPVOTE, -1 for DOWNVOTE
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  review Reviews @relation(fields: [reviewId], references: [id])
  voter  Users   @relation(fields: [voterId], references: [id])

  @@id([reviewId, voterId])
  @@index([reviewId, voterId], type: BTree)
  @@map("review_votes")
}

model Labels {
  id        Int             @id @default(autoincrement())
  name      ReviewLabelName
  typeOf    ReviewType      @map("type_of")
  createdAt DateTime        @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime        @updatedAt @map("updated_at") @db.Timestamptz(3)

  reviewLabels ReviewLabels[]

  @@map("labels")
}

model ReviewLabels {
  id        Int      @id @default(autoincrement())
  labelId   Int      @map("label_id")
  reviewId  String   @map("review_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  label  Labels  @relation(fields: [labelId], references: [id])
  review Reviews @relation(fields: [reviewId], references: [id])

  @@index([reviewId], type: BTree)
  @@map("review_labels")
}

model ReviewEvents {
  id               String          @id() @db.Uuid
  reviewId         String          @map("review_id")
  eventType        ReviewEventType @map("event_type")
  triggeringUserId String?         @map("triggering_user_id")
  createdAt        DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)

  review         Reviews @relation(fields: [reviewId], references: [id])
  triggeringUser Users?  @relation(fields: [triggeringUserId], references: [id])

  @@map("review_events")
}

model ReviewReactions {
  reviewId       String             @map("review_id")
  reactingUserId String             @map("reacting_user_id")
  reaction       ReviewReactionType
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime           @updatedAt @map("updated_at") @db.Timestamptz(3)

  review       Reviews @relation(fields: [reviewId], references: [id])
  reactingUser Users   @relation(fields: [reactingUserId], references: [id])

  @@id([reviewId, reactingUserId])
  @@index([reviewId, reactingUserId], type: BTree)
  @@map("review_reactions")
}

model AcadTerm {
  id            String   @id
  acadYearStart Int      @map("acad_year_start")
  acadYearEnd   Int      @map("acad_year_end")
  term          String   @map("term") @db.VarChar(2)
  bossId        Int      @map("boss_id")
  startDt       DateTime @map("start_dt") @db.Timestamptz(3)
  endDt         DateTime @map("end_dt") @db.Timestamptz(3)

  classes   Classes[]
  BidWindow BidWindow[]

  @@map("acad_term")
}

model ClassTiming {
  id        Int      @id @default(autoincrement())
  classId   String   @map("class_id")
  startDate DateTime @map("start_date") @db.Timestamptz(3)
  endDate   DateTime @map("end_date") @db.Timestamptz(3)
  dayOfWeek String   @map("day_of_week") @db.VarChar(3)
  startTime String   @map("start_time")
  endTime   String   @map("end_time")
  venue     String   @map("venue") @db.VarChar(255)

  class Classes @relation(fields: [classId], references: [id])

  @@index([classId], type: BTree)
  @@map("class_timing")
}

model ClassExamTiming {
  id        Int      @id @default(autoincrement())
  classId   String   @map("class_id")
  date      DateTime @map("date") @db.Timestamptz(3)
  dayOfWeek String   @map("day_of_week") @db.VarChar(3)
  startTime String   @map("start_time")
  endTime   String   @map("end_time")
  venue     String?  @map("venue") @db.VarChar(255)

  class Classes @relation(fields: [classId], references: [id])

  @@index([classId])
  @@map("class_exam_timing")
}

model ClassAvailability {
  // One class will have only one class availability per bid window
  classId         String @map("class_id")
  bidWindowId     Int    @map("bid_window_id")
  total           Int    @map("total")
  currentEnrolled Int    @map("current_enrolled")
  reserved        Int    @map("reserved")
  available       Int    @map("available")

  class     Classes   @relation(fields: [classId], references: [id])
  bidWindow BidWindow @relation(fields: [bidWindowId], references: [id])

  // Composite key from `classes` and `BidWindow`
  @@id([classId, bidWindowId])
  @@map("class_availability")
}

model BidWindow {
  // Each unique bid window is determined by acadTerm, round, and window
  id         Int    @id @default(autoincrement())
  acadTermId String @map("acad_term_id")
  round      String @map("round") @db.VarChar(2)
  window     Int    @map("window")

  classAvailability ClassAvailability[]
  bidResult         BidResult[]

  acadTerm AcadTerm @relation(fields: [acadTermId], references: [id])

  @@map("bid_window")
}

model BidResult {
  bidWindowId          Int    @map("bid_window_id")
  classId              String @map("class_id")
  vacancy              Int    @map("vacancy")
  openingVacancy       Int    @map("opening_vacancy")
  beforeProcessVacancy Int    @map("before_process_vacancy")
  dice                 Int    @map("d_i_c_e")
  afterProcessVacancy  Int    @map("after_process_vacancy")
  enrolledStudents     Int    @map("enrolled_students")
  bidActualMedian      Float  @map("bid_actual_median")
  bidActualMin         Float  @map("bid_actual_min")
  bidPredictedMedian   Float  @map("bid_predicted_median")
  bidPredictedMin      Float  @map("bid_predicted_min")

  bidWindow BidWindow @relation(fields: [bidWindowId], references: [id])
  class     Classes   @relation(fields: [classId], references: [id])

  @@id([bidWindowId, classId])
  @@map("bid_result")
}

model HackSubmission {
  id                 String               @id @default(uuid())
  teamName           String               @map("team_name")
  submissionUrl      String               @map("submission_url")
  slideEmbedUrl      String               @map("slide_embed_url")
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt          DateTime             @updatedAt @map("updated_at") @db.Timestamptz(3)
  HackSubmissionVote HackSubmissionVote[]

  @@map("hack_submission")
}

model HackSubmissionVote {
  hackSubmissionId String   @map("hack_submission_id")
  voterId          String   @map("voter_id")
  weight           Int      @default(1) @db.SmallInt // 1 for UPVOTE, -1 for DOWNVOTE
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  hackSubmission HackSubmission @relation(fields: [hackSubmissionId], references: [id])
  voter          Users          @relation(fields: [voterId], references: [id])

  @@id([hackSubmissionId, voterId])
  @@map("hack_submission_vote")
}

enum UniversityAbbreviation {
  SMU
  NUS
  NTU
}

enum ReviewLabelName {
  INTERESTING        @map("interesting")
  PRACTICAL          @map("practical")
  GAINED_NEW_SKILLS  @map("gained new skills")
  ENGAGING           @map("engaging")
  FAIR_GRADING       @map("fair grading")
  EFFECTIVE_TEACHING @map("effective teaching")
}

enum ReviewType {
  COURSE
  PROFESSOR
}

enum ReviewEventType {
  VIEW
  SHARE
  REACTION // reactions that are not upvotes or downvotes
  UPVOTE
  DOWNVOTE
  INTERACTION // interactive clicks, such as opening a review item modal
}

enum ReviewReactionType {
  LIKE     @map("💜")
  THANKFUL @map("🙏")
  SLAY     @map("💅")
  FUNNY    @map("🤣")
  CRYING   @map("😭")
  SHOCKED  @map("😦")
}

enum GradingBasis {
  PASS_FAIL @map("Pass/Fail")
  GRADED    @map("Graded")
  NA        @map("NA")
}
